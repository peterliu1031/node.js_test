const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());
app.use(cors());

/**¿¿ 1. ¿¿¿ SQLite ¿¿¿ ¿¿**/
const db = new sqlite3.Database('data.db');
db.run(
  CREATE TABLE IF NOT EXISTS sensor_data (
    temperature REAL,
    humidity REAL,
    timestamp TEXT
  )
);

/**¿¿ 2. ¿¿¿¿¿¿¿¿ ¿¿¿¿¿ ¿¿**/
// ¿¿¿¿ limit ¿¿¿¿¿¿
app.get('/data', (req, res) => {
  const limit = parseInt(req.query.limit) || 10;
  db.all(
    'SELECT * FROM sensor_data ORDER BY timestamp DESC LIMIT ?',
    [limit],
    (err, rows) => {
      if (err) return res.status(500).json({ status: 'error', message: err.message });
      res.json(rows);
    }
  );
});

// ¿¿ ESP32 ¿¿¿¿¿¿¿¿¿¿¿
app.post('/data', (req, res) => {
  const { temp, hum } = req.query;
  if (!temp || !hum) {
    return res.status(400).json({ status: 'error', message: '¿¿ temp ¿ hum ¿¿' });
  }
  const t = Math.round(parseFloat(temp));
  const h = Math.round(parseFloat(hum));
  if (isNaN(t) || isNaN(h)) {
    return res.status(400).json({ status: 'error', message: 'temp ¿ hum ¿¿¿¿¿' });
  }

  const timestamp = new Date().toISOString();
  db.run(
    'INSERT INTO sensor_data (temperature, humidity, timestamp) VALUES (?, ?, ?)',
    [t, h, timestamp],
    err => {
      if (err) return res.status(500).json({ status: 'error', message: err.message });
      console.log('¿¿¿¿¿:', { temperature: t, humidity: h, timestamp });
      res.json({ status: 'success', data: { temperature: t, humidity: h, timestamp } });
    }
  );
});

/**¿¿ 3. ¿¿¿¿¿¿¿¿ Map ¿¿¿¿¿¿¿¿¿¿¿ ¿¿**/
const tasks = new Map();

/**¿¿ 4. ¿¿¿¿¿¿¿¿¿¿ ¿¿ ¿¿**/
// ¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿¿
app.post('/api/device/:deviceId/start', (req, res) => {
  const { deviceId } = req.params;
  const { mode, duration } = req.body; // e.g. mode='strong', duration=1800
  tasks.set(deviceId, {
    mode,
    duration,
    startTime: Math.floor(Date.now() / 1000),
    elapsed: 0
  });
  // TODO: ¿¿¿¿¿¿¿¿¿¿¿ MQTT¿¿¿¿¿¿¿
  res.json({ success: true, message: '¿¿¿¿¿' });
});

// ¿¿¿¿¿¿¿¿¿¿¿
app.post('/api/device/:deviceId/pause', (req, res) => {
  const { deviceId } = req.params;
  const task = tasks.get(deviceId);
  if (!task) {
    return res.status(400).json({ success: false, message: '¿¿¿¿¿¿¿¿' });
  }
  const now = Math.floor(Date.now() / 1000);
  task.elapsed += now - task.startTime;
  tasks.set(deviceId, task);
  // TODO: ¿¿¿¿¿¿
  res.json({ success: true, message: '¿¿¿¿¿' });
});

// ¿¿¿¿¿¿¿¿¿
app.post('/api/device/:deviceId/stop', (req, res) => {
  const { deviceId } = req.params;
  if (!tasks.has(deviceId)) {
    return res.status(400).json({ success: false, message: '¿¿¿¿¿¿¿¿' });
  }
  tasks.delete(deviceId);
  // TODO: ¿¿¿¿¿¿
  res.json({ success: true, message: '¿¿¿¿¿' });
});

/**¿¿ 5. ¿¿¿¿¿¿¿¿¿¿¿¿¿ ¿¿**/
app.get('/api/device/:deviceId/status', (req, res) => {
  const { deviceId } = req.params;
  const task = tasks.get(deviceId);
  if (!task) {
    // ¿¿¿¿¿¿¿¿¿ running=false
    return res.json({ running: false });
  }
  const now = Math.floor(Date.now() / 1000);
  const totalElapsed = task.elapsed + (now - task.startTime);
  const remainingSeconds = Math.max(0, task.duration - totalElapsed);

  // ¿¿¿¿¿¿¿¿¿¿ SQLite ¿¿¿¿¿¿¿¿¿¿
  const latestTemp = 55;
  const latestHum = 20;

  res.json({
    running: remainingSeconds > 0,
    mode: task.mode,
    remainingSeconds,
    temperature: latestTemp,
    humidity: latestHum
  });
});

/**¿¿ 6. ¿¿¿¿¿ & ¿¿ ¿¿**/
app.listen(port, () => {
  console.log(¿¿¿¿¿ http://localhost:${port});
});

process.on('SIGINT', () => {
  console.log('¿¿¿¿¿¿¿...');
  db.close(err => {
    if (err) console.error('¿¿¿¿¿¿¿¿:', err.message);
    process.exit(0);
  });
});
